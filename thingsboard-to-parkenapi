#! /usr/bin/env python3

import requests
import os
import operator
import datetime
import json
from argparse import ArgumentParser

parser = ArgumentParser()
parser.add_argument("output", help="write output to FILE")
args = parser.parse_args()

base_url = "https://portal.mhascaro.com/api"

token_url = f"{base_url}/auth/login"

payload = {
    "username": os.environ['THINGSBOARD_USERNAME'],
    "password": os.environ['THINGSBOARD_PASSWORD']
}

response = requests.post(token_url, json=payload)
token = response.json()["token"]

auth_headers = {
    "X-Authorization": f"Bearer {token}"
}

list_url = f"{base_url}/entityGroup/3c521c80-53bd-11ea-aa10-3316385c1cc2/entities?limit=100"

response = requests.get(list_url, headers=auth_headers)

parking_lots = response.json()["data"]

def get_attribute(items, name):
    for i in items:
        if(i["key"] == name):
            return i["value"]

def get_timeseries_value(timeseries, name):
    val = timeseries[name][0]["value"]
    if val == None:
        return 0
    else:
        return int(float(val))

def fetch_lot_data(lot):
    id = lot["id"]["id"]

    attribute_url = f"{base_url}/plugins/telemetry/ASSET/{id}/values/attributes?keys=address,latitude,longitude"
    attrs = requests.get(attribute_url, headers=auth_headers).json()

    timeseries_url = f"{base_url}/plugins/telemetry/ASSET/{id}/values/timeseries?keys=latestSumParkingState,SumOccupied,TotalParking_mapping"
    timeseries = requests.get(timeseries_url, headers=auth_headers).json()
    total = get_timeseries_value(timeseries, "TotalParking_mapping")
    occupied = get_timeseries_value(timeseries, "latestSumParkingState")
    free = total - occupied

    return {
        "id":               id,
        "lot_type":         "Parkhaus",
        "address":          get_attribute(attrs, "address"),
        "name":             get_attribute(attrs, "address"),
        "forecast":         False,
        "state":            "open",
        "coords" : {
            "lat":          get_attribute(attrs, "latitude"),
            "lng":          get_attribute(attrs, "longitude"),
        },
        "total":            total,
        "free":             free,
    }

updated_lots = list(map(fetch_lot_data, parking_lots))

print(f"Fetched information for {len(updated_lots)} parking lots")

utc_now = datetime.datetime.utcnow().isoformat()

parken_api_response = {
    "last_downloaded": utc_now,
    "last_updated": utc_now,
    "lots": updated_lots
}

with open(args.output, 'w', encoding='utf-8') as f:
    json.dump(parken_api_response, f, ensure_ascii=False, indent=2)

print(f"Wrote output to {args.output}")
